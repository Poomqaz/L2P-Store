// ----------------------------------------------------
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö Imports ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ: { error } ‡∏à‡∏≤‡∏Å "console" ‡πÅ‡∏•‡∏∞ { describe } ‡∏à‡∏≤‡∏Å "bun:test"
// ----------------------------------------------------
import { PrismaClient } from "../../generated/prisma";
const prisma = new PrismaClient();

import type { BookInterface } from "../interface/BookInterface";
// import { describe } from "bun:test"; // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
// import { error } from "console"; // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å

// ----------------------------------------------------
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Update Data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 'any'
// ----------------------------------------------------
type BookUpdateData = {
    name: string;
    price: number;
    isbn: string;
    description: string;
    category: string;
    qty: number;
    image?: string; // image ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡πÑ‡∏î‡πâ
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° fields ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
}

export const BookController = {
    create: async ({ body }: { body: BookInterface }) => {
        try {
            const imageName = body.image.name;
            const image = body.image;
            const book = await prisma.book.create({
                data: {
                    name: body.name,
                    price: parseInt(body.price.toString()),
                    isbn: body.isbn,
                    description: body.description,
                    category: body.category,
                    qty: parseInt(body.qty?.toString() || '0'),
                    image: imageName
                }
            })

            Bun.write('public/uploads/' + imageName, image);

            return book
        } catch (err) {
            console.log(err);
            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ err ‡πÄ‡∏õ‡πá‡∏ô unknown ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ message
            return { error: (err as Error).message || 'Failed to create book' } 
        }
    },
    list: async () => {
        try {
            return await prisma.book.findMany({
                orderBy: {
                    createdAt: 'asc'
                },
                where: {
                    status: 'active'
                },
                select: {
                    id: true,
                    name: true,
                    price: true,
                    isbn: true,
                    description: true,
                    image: true,
                    category: true,
                    qty: true,
                    averageRating: true, 
                    reviewCount: true,
                    ImportToStock: {
                        select: {
                            id: true,
                            qty: true,
                            createdAt: true,
                            updateAt: true
                        }
                    }
                }
            });
        } catch (err) {
            console.log(err);
            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (Prisma Error ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ Type ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
            return { error: 'Failed to list books', details: err };
        }
    },
    // 
    update: async ({ params, body }: {
        params: { id: string },
        body: BookInterface
    }) => {
        try {
            const oldBook = await prisma.book.findUnique({
                where: { id: params.id }
            });

            if (!oldBook) {
                return { error: 'Book not found' };
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ image ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
            const imageName = (body.image && typeof body.image !== "string")
                ? body.image.name
                : oldBook?.image || '';

            const image = (body.image && typeof body.image !== "string")
                ? body.image
                : null;

            if (image) {
                const file = Bun.file("public/uploads/" + oldBook?.image);
                if (await file.exists()) {
                    // Bun.file.delete() ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Bun.file()
                    // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Bun.rm() ‡∏´‡∏£‡∏∑‡∏≠ fs.rm() ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Bun, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ fs.rm ‡∏´‡∏£‡∏∑‡∏≠ assume Bun.file ‡∏°‡∏µ delete()
                    // ‡πÅ‡∏ï‡πà‡πÉ‡∏ô Bun ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Bun.write/Bun.file() ‡πÅ‡∏•‡∏∞ Bun.rm
                    
                    // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ Bun.rm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
                    // await Bun.rm("public/uploads/" + oldBook?.image);
                    
                    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ oldBook.image ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å check ‡πÉ‡∏ô if block)
                    // ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Bun.rm:
                    await Bun.write('public/uploads/' + oldBook.image, ''); // Clear file content before deleting or use Bun.rm
                    // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Bun.file.delete() ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                    // ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏Ñ‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Type Safety
                    // ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Bun API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πà‡∏∞
                    
                }
                Bun.write('public/uploads/' + imageName, image);
            }

            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤ Qty ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á
            const newQty = parseInt(body.qty?.toString() || '0');
            const oldQty = oldBook?.qty ?? 0;
            const diffQty = newQty - oldQty; 

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô ImportToStock (Audit Trail)
            if (diffQty !== 0) {
                await prisma.importToStock.create({
                    data: {
                        bookid: params.id,
                        qty: diffQty, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á (‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏î)
                    }
                });
            }

            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ BookUpdateData Type ‡πÅ‡∏ó‡∏ô 'any'
            const updateData: BookUpdateData = {
                name: body.name,
                price: parseInt(body.price.toString()),
                isbn: body.isbn,
                description: body.description,
                category: body.category,
                qty: newQty, // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ qty ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
            };

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° imageName ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô updateData ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            if (imageName) {
                updateData.image = imageName;
            }

            const book = await prisma.book.update({
                data: updateData,
                where: { id: params.id }
            });

            return book;
        } catch (err) {
            console.error(err);
            return { error: (err as Error).message || 'Failed to update book' };
        }
    },
    delete: async ({ params }: {
        params: {
            id: string
        }
    }) => {
        try {
            const oldBook = await prisma.book.findUnique({
                where: {
                    id: params.id
                }
            })

            if (oldBook?.image != null) {
                const filePath = 'public/uploads/' + oldBook.image;
                const file = Bun.file(filePath);

                if (await file.exists()) {
                    // await file.delete(); // ‡∏î‡∏π‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î update
                    // üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Bun.rm(filePath);
                }
            }

            await prisma.book.update({
                where: { id: params.id },
                data: { status: 'inactive' }
            });

            return { message: 'success' }
        } catch (error) {
            return { error: (error as Error).message || 'Failed to delete book' }
        }
    },
    importToStock: async ({ body }: {
        body: {
            bookId:string
            qty: number
        }
    }) => {
        try {
            const book = await prisma.book.findUnique({
                where: {
                    id: body.bookId
                }
            })

            if (!book) {
                return { error: 'Book not found'}
            }

            await prisma.importToStock.create({
                data: {
                    bookid: body.bookId,
                    qty: body.qty
                }
            })

            await prisma.book.update({
                where: { id: body.bookId },
                data: {
                    qty: {
                        increment: body.qty // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
                    }
                }
            });
            
            return { message: 'suscess'};
        } catch (err) {
            return { error: (err as Error).message || 'Failed to import to stock' };
        }
    },
    historyImportToStock: async ({ params }: {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö bookId ‡∏à‡∏≤‡∏Å URL parameters
        params: { bookId: string } 
    }) => {
        try {
            const bookId = params.bookId;
            
            // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ bookId ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!bookId) {
                return { error: 'Book ID is required' };
            }

            // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
            const history = await prisma.importToStock.findMany({
                where: {
                    // bookid ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ImportToStock ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö bookId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
                    bookid: bookId 
                },
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
                orderBy: {
                    createdAt: 'desc' 
                }
            });

            // 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            return history; 
            
        } catch (err) {
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return { error: 'Failed to fetch import history', details: err };
        }
    },
    addCategory: async ({ body }: {
        body: {
            bookId: string;
            newCategory: string;
        };
    }) => {
        try {
            // 1. Validate input
            if (!body.bookId || !body.newCategory) {
                return { error: 'BookId and newCategory are required' };
            }

            const trimmedCategory = body.newCategory.trim();
            if (trimmedCategory === '') {
                return { error: 'Category cannot be empty' };
            }

            // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const book = await prisma.book.findUnique({
                where: { id: body.bookId },
                select: { id: true, category: true }
            });

            if (!book) {
                return { error: 'Book not found' };
            }

            // 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
            let existingCategories: string[] = [];
            if (book.category && book.category.trim() !== '') {
                existingCategories = book.category
                    .split(',')
                    .map(c => c.trim())
                    .filter(c => c !== ''); // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
            }

            // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (case-insensitive)
            const categoryExists = existingCategories.some(
                cat => cat.toLowerCase() === trimmedCategory.toLowerCase()
            );

            if (categoryExists) {
                return { 
                    error: 'Category already exists',
                    data: { currentCategories: existingCategories }
                };
            }

            // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
            existingCategories.push(trimmedCategory);

            // 6. ‡∏£‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô string
            const updatedCategoryString = existingCategories.join(', '); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á comma

            // 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const updatedBook = await prisma.book.update({
                where: { id: body.bookId },
                data: {
                    category: updatedCategoryString,
                },
                select: {
                    id: true,
                    name: true,
                    category: true
                }
            });

            return { 
                message: 'Category added successfully', 
                data: {
                    bookId: updatedBook.id,
                    bookName: updatedBook.name,
                    categories: updatedBook.category?.split(', ') || []
                }
            };

        } catch (err) {
            console.error('Error in addCategory:', err);
            return { 
                error: 'Failed to add category',
                details: err instanceof Error ? err.message : 'Unknown error'
            };
        }
    }
}