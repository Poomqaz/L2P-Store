import { PrismaClient, Prisma } from "../../generated/prisma"; 

const prisma = new PrismaClient();

// ‚≠êÔ∏è Type Definitions ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‚≠êÔ∏è

// Type Guard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Object ‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î toNumber() ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isDecimal(value: unknown): value is { toNumber: () => number } {
    return typeof value === 'object' && value !== null && 'toNumber' in value && typeof (value as { toNumber: unknown }).toNumber === 'function';
}

// üéØ Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SaleDetail ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å Include ‡πÅ‡∏•‡∏∞ Select
type SaleDetailForSummary = {
    // SaleDetail base fields
    id: string; 
    saleId: string;
    bookId: string;
    qty: number;
    price: Prisma.Decimal; 
    createdAt: Date;
    updatedAt: Date;

    // Included Relations
    sale: Record<string, unknown>; 
    book: { 
        id: string; 
        name: string; 
        price: Prisma.Decimal; 
        description: string | null; 
        isbn: string | null; 
        image: string | null; 
        category: string | null; 
        qty: number; 
    }
};

// ----------------------------------------------------------------------

export class SaleDetailController {
    
    // ... getAllSaleDetails ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ...

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ SaleDetail ‡∏ï‡∏≤‡∏° Sale ID
    static async getSaleDetailsBySaleId({ params }: { params: { saleId: string } }) {
        try {
            const saleId = params.saleId; 

            if (!saleId) {
                throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Sale ID');
            }

            const saleDetails = await prisma.saleDetail.findMany({
                where: {
                    saleId: saleId
                },
                include: {
                    sale: {
                        include: {
                            admin: {
                                select: { id: true, name: true, username: true, level: true }
                            },
                            member: {
                                select: { id: true, name: true, username: true, phone: true, points: true }
                            }
                        }
                    },
                    book: {
                        select: { id: true, name: true, price: true, description: true, isbn: true, image: true, category: true, qty: true }
                    }
                },
                orderBy: { id: 'asc' }
            }) as unknown as SaleDetailForSummary[]; 

            if (saleDetails.length === 0) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sale ID ‡∏ô‡∏µ‡πâ');
            }
            
            const summary = {
                totalItems: saleDetails.length,
                totalQuantity: saleDetails.reduce((sum: number, detail: SaleDetailForSummary) => sum + detail.qty, 0),
                totalAmount: saleDetails.reduce((sum: number, detail: SaleDetailForSummary) => {
                    let priceAsNumber: number;

                    // üéØ ‡πÉ‡∏ä‡πâ Type Guard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Type Conversion ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                    if (isDecimal(detail.price)) {
                        priceAsNumber = detail.price.toNumber();
                    } else {
                        // ‡πÉ‡∏ä‡πâ Casting ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                        priceAsNumber = detail.price as unknown as number; 
                    }
                    
                    return sum + (priceAsNumber * detail.qty);
                }, 0),
                saleInfo: saleDetails[0].sale
            };

            return {
                success: true,
                data: saleDetails,
                summary: summary,
                message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SaleDetail ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            };
        } catch (error: unknown) { 
            console.error('Error getting sale details by sale ID:', error);
            throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SaleDetail: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }

    // ... getSaleDetailsByBookId ‡πÅ‡∏•‡∏∞ getSaleDetailById ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö) ...
}